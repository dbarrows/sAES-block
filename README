//Author	Dexter Barrows


File list
************************************************************
CBC-sAES.c	- The C99 source file for CBC mode using sAES
CTR-sAES.c	- The C99 source file for CTR mode using sAES
input1 		- sample input file with data (shorter)
input2 		- sample input file with data (longer)
README		- this README
*********************************************************

Instructions
************************************************************************************************************************************

CBC-sAES takes up to 6 command line arguments in order:
----------------------------------------------------------------

-e / -d							-> tells the program to encrypt or decrypt
input file name					-> the name of the file containing the plaintext or ciphertext depending on -e / -d
key								-> the key to use
output file name				-> the name of the file to put the ciphertext or plaintext depending on -e / -d
padding length					-> the amount of padding that was used to encrypt the data, only for decryption mode
								   (optional)
nonce							-> the nonce seed to use to generate the IV
								   (optional)

Note that input less than 16-bits (a single block) will simply be padded with 0s as ciphertext stealing is not possible

CTR-sAES takes 5 command line arguments in order:
----------------------------------------------------------------

-e / -d							-> tells the program to encrypt or decrypt
input file name					-> the name of the file containing the plaintext or ciphertext depending on -e / -d
key								-> the key to use
output file name				-> the name of the file to put the ciphertext or plaintext depending on -e / -d
nonce							-> the nonce seed to use to generate the CTR values


Examples:
---------

Input:		>> ./CBC-sAES -e infile2 1234 outfile2 0 34 						-> tells the program to encrypt the data in "infile2"
																				   using key "1234" with 0 padding (will be ignored
																				   as it is running in encryption mode) and using
																				   nonce "34", then put the result in "outfile2"
Output:		Set to encrypt.														-> running in encryption mode
			File data:		110010011010111110 									-> file data read as is
			Multiple blocks with last block that is 14-bit(s) short detected,
			ciphertext stealing will be used.							 		-> information about data and padding
			Key:			0x1234												-> key as read by program
			Padded data:	11001001101011111000000000000000 					-> padded data
			IV:				0x2218 												-> IV generated
			Ciphertext:		0xC9AF8000 											-> plaintext converted to hex
			Plaintext:		0xB1CF3EEC 											-> ciphertext in hex

Input:		>> ./CBC-sAES -d outfile2 1234 in_prime2 14 34 						-> tells the program to decrypt the data in "outfile2"
																				   using key "1234" with 14-bit padding and using
																				   nonce "34", then put the result in "in_prime2"
Output:		Set to decrypt.														-> running in encryption mode
			File data:		110010011010111110 									-> file data read as is
			Key:			0x1234												-> key as read by program
			Padded data:	11001001101011111000000000000000 					-> padded data
			IV:				0x2218 												-> IV generated
			Plaintext:		0xB1CF3EEC 											-> plaintext converted to hex
			Ciphertext:		0xC9AF8000 											-> ciphertext in hex

Then running:

>> cat infile2 in_prime2
110010011010111110
110010011010111110

shows that encryption/decryption was successful, and that the padded data was successfully removed after decryption.

Also:

>> cat outfile2
10110001110011110011111011101100

shows that the ciphertext is padded as it is supposed to be.



Input:		>> ./CTR-sAES -e infile2 34f1 outfile2 56							-> tells the program to encrypt the data in "infile2"
																				   using the key "34f1" and nonce "56" to generate the
																				   IV used as the seed for the CTRs, then put the
																				   result in "outfile2"
Output:		Set to encrypt. 													-> running in encryption mode
			File data:		110010011010111110 									-> file data as read as is
			Multiple blocks with last block that is 14-bit(s) short detected. 	-> information about data and padding
			Key:			0x34F1 												-> key as read by program
			Padded data:	11001001101011111000000000000000 					-> padded data
			CTR seed:		0x77C4 												-> nonce-generated IV seed to use with the CTRs
			Plaintext:		0xC9AF8000 											-> plaintext converted to hex
			Ciphertext:		0x73532389 											-> ciphertext in hex (padded)
 
Input:		>> ./CTR-sAES -d outfile2 34f1 in_prime2 56 						-> tells the program to decrypt the data in "outfile2"
																				   using the key "34f1" and nonce "56" to generate the
																				   IV used as the seed for the CTRs, then put the
																				   result in "in_prime2"
Output:		Set to decrypt. 													-> running in decryption mode
			File data:		011100110101001100 									-> file data as read as is
			Multiple blocks with last block that is 14-bit(s) short detected. 	-> information about data and padding
			Key:			0x34F1 												-> key as read by program
			Padded data:	01110011010100110000000000000000 					-> padded data
			CTR seed:		0x77C4 												-> nonce-generated IV seed to use with the CTRs
			Ciphertext:		0x73530000											-> ciphertext converted to hex
			Plaintext:		0xC9AF8000 											-> plaintext in hex (padded)

Then running:

>> cat infile2 in_prime2
110010011010111110
110010011010111110

shows that encryption/decryption was successful, and that the padded data was successfully removed after decryption.

Also:

>> cat outfile2
011100110101001100

shows that the ciphertext is *not* padded, as should be the case.

*************************************************************************************************************************
